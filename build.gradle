buildscript {
  ext {
    springBootVersion = '1.5.3.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
  mavenCentral()
}


dependencies {
  compile('org.springframework.boot:spring-boot-starter-web')
  testCompile('org.springframework.boot:spring-boot-starter-test')
}

tasks.withType(Test) {
  maxParallelForks = Runtime.runtime.availableProcessors() - 1

  testLogging {
    // set options for log level LIFECYCLE
    events "passed", "skipped", "failed"
//    showExceptions true
//    exceptionFormat "full"
//    showCauses true
//    showStackTraces true

    // set options for log level DEBUG and INFO
    debug {
      events "started", "passed", "skipped", "failed", "standardOut", "standardError"
      exceptionFormat "full"
    }
    info.events = debug.events
    info.exceptionFormat = debug.exceptionFormat

    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        def repeatLength = startItem.length() + output.length() + endItem.length()
        println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
      }
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '3.5'
}
